name: "Python Poetry Action"
author: "Bj√∂rn Ricks <bjoern.ricks@greenbone.net>"
description: "An action to install python and project dependencies via poetry"
inputs:
  version:
    description: "Python version that should be installed"
    default: "3.9"
  working-directory:
    description: "A working directory where to run poetry install"
  install-dependencies:
    description: "Install project dependencies. Default is 'true'. Set to an other string then 'true' to not install the dependencies."
    default: "true"
  no-root:
    description: "Do not install the project itself, only the dependencies"
  without-dev:
    description: "Do not install the development dependencies"
  cache:
    description: "Cache dependencies by setting it to 'true'. Leave unset or set to an other string then 'true' to disable the cache."
  cache-dependency-path:
    description: "Used to specify the path to dependency files. Supports wildcards or a list of file names for caching multiple dependencies."
  cache-poetry-installation:
    description: "Cache poetry and its dependencies by setting it to 'true'. Leave unset or set to an other string then 'true' to disable the cache."
  poetry-version:
    description: "Use a specific poetry version. By default the latest release is used."
branding:
  icon: "package"
  color: "green"

runs:
  using: "composite"
  steps:
    - name: Enable/Disable caching
      run: |
        if [[ "${{ inputs.cache }}" = "true" ]]; then
          echo "Caching is enabled"
          CACHE="poetry"
        else
          echo "Caching is disabled"
          CACHE=""
        fi
        echo "CACHE=${CACHE}" >> $GITHUB_ENV
      shell: bash
    - name: Get pip cache dir
      id: pip-cache
      if: ${{ inputs.cache-poetry-installation == 'true' }}
      run: |
        echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      shell: bash
    - name: Cache poetry installation
      if: ${{ inputs.cache-poetry-installation == 'true' }}
      uses: actions/cache@v3
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-poetry-install-cache
    - name: Install poetry ${{ inputs.poetry-version }}
      # poetry needs to be installed before using setup-python with poetry cache
      if: ${{ inputs.cache == 'true' }}
      run: |
        if [[ -n "${{ inputs.poetry-version }}" ]]; then
          python3 -m pip install --upgrade poetry==${{ inputs.poetry-version }}
        else
          python3 -m pip install --upgrade poetry
        fi
      shell: bash
    - name: Set up Python ${{ inputs.version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.version }}
        cache: ${{ env.CACHE }}
        cache-dependency-path: ${{ inputs.cache-dependency-path }}
    - name: Install pip
      run: |
        python -m pip install --upgrade pip
      shell: bash
    - name: Install poetry ${{ inputs.poetry-version }}
      # ensure that poetry is installed in the current set up python environment
      # if poetry cache isn't used
      if: ${{ inputs.cache != 'true' }}
      run: |
        if [[ -n "${{ inputs.poetry-version }}" ]]; then
          python -m pip install --upgrade poetry==${{ inputs.poetry-version }}
        else
          python -m pip install --upgrade poetry
        fi
      shell: bash
    - name: List installed
      run: |
        echo "Installed:"
        echo " * $(poetry --version) $(which poetry)"
        echo " * $(pip --version)"
      shell: bash
    - name: Parse inputs
      if: ${{ inputs.install-dependencies == 'true' }}
      run: |
        if [[ -n "${{ inputs.no-root }}" ]]; then
          ARGS="--no-root"
        fi
        if [[ -n "${{ inputs.without-dev }}" ]]; then
          ARGS="$ARGS --without dev"
        fi
        echo "ARGS=${ARGS}" >> $GITHUB_ENV
      shell: bash
    - name: Install dependencies
      if: ${{ inputs.install-dependencies == 'true' }}
      run: poetry install ${{ env.ARGS }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
