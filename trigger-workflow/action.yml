name: "Greenbone Trigger Workflow Run Action"
description: "GitHub Action to create workflow dispatch events for a repository"
author: "Bj√∂rn Ricks"
inputs:
  repository:
    description: "Repository of the workflow to trigger"
    required: true
  token:
    description: "GitHub Token for authentication"
    required: true
  workflow:
    description: "Workflow to trigger. Either a workflow ID or file path. For example `ci.yml`."
    required: true
  ref:
    description: "The git reference for the workflow. The reference can be a branch or tag name."
    required: true
    default: "main"
  inputs:
    description: "Inputs to pass to the workflow, must be a JSON string and single quotation marks are not allowed. All values must be strings (even if used as boolean or number)."
    required: false
    default: "{}"
  wait-for-completion-timeout:
    description: "Maximum amount of time in seconds to wait to for workflow to finish. Set to empty string or false to not wait for the workflow."
    required: false
    default: "3600"
  wait-for-completion-interval:
    description: "Time to wait  between two polls to get run status in seconds."
    required: false
    default: "60"
  python-version:
    description: "Python version to use for running the action"
    required: false
    default: "3.10"
  poetry-version:
    description: "Use a specific poetry version. By default the latest release is used."

runs:
  using: "composite"
  steps:
    - name: Set up Python and Poetry
      uses: greenbone/actions/poetry@main
      with:
        version: ${{ inputs.python-version }}
        poetry-version: ${{ inputs.poetry-version }}
        working-directory: ${{ github.action_path }}
        without-dev: "true"
    - name: Run trigger-workflow
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        poetry run trigger-workflow \
          --token ${{ inputs.token }} \
          --repository ${{ inputs.repository }} \
          --workflow ${{ inputs.workflow }} \
          --ref ${{ inputs.ref }} \
          --timeout ${{ inputs.wait-for-completion-timeout }} \
          --interval ${{ inputs.wait-for-completion-interval }} \
          --inputs '${{ inputs.inputs }}'
