name: "Sign GitHub Release Files"
author: "Bj√∂rn Ricks <bjoern.ricks@greenbone.net>"
description: |
  "An action to download GitHub release files, sign the releases files and "
  "upload release file signatures."

inputs:
  python-version:
    description: "Python version that should be installed and used."
    default: "3.10"
  git-tag-prefix:
    description: "Set git tag prefix to the passed input. Default: 'v'"
    default: "v"
  github-token:
    description: "Token with write rights required to create the release."
    default: ${{ github.token }}
  gpg-fingerprint:
    description: "GPG fingerprint, represented as a string."
    required: true
  gpg-key:
    description: "GPG key, represented as a string."
    required: true
  gpg-passphrase:
    description: "GPG passphrase, represented as a string."
    required: true
  versioning-scheme:
    description: "The versioning scheme to use for version parsing and calculation of the last release. Supported: ['semver', 'pep440']; Default: pep440"
    default: "pep440"
  release-version:
    description: "Set an explicit release version, that should be used. Otherwise it will be determined from the tags."
  release-series:
    description: "Allow to determine release versions for an older release series like '22.4'."

branding:
  icon: "package"
  color: "green"

runs:
  using: "composite"
  steps:
    # Setup
    - name: Check gpg-key input
      if: inputs.gpg-key == ''
      run: |
        echo "::error ::gpg-key input is missing."
        exit 1
      shell: bash
    - name: Check gpg-fingerprint input
      if: inputs.gpg-fingerprint == ''
      run: |
        echo "::error ::gpg-fingerprint input is missing."
        exit 1
      shell: bash
    - name: Check gpg-passphrase input
      if: inputs.gpg-passphrase == ''
      run: |
        echo "::error ::gpg-passphrase input is missing."
        exit 1
      shell: bash
    - name: Parse release-version if set (overwrite release-type)
      if: ${{ inputs.release-version }}
      run: |
        ARGS="--release-version ${{ inputs.release-version }}"
        echo "ARGS=${ARGS}" >> $GITHUB_ENV
      shell: bash
    - name: Parse release-series
      if: ${{ inputs.release-series }}
      run: |
        ARGS="${ARGS} --release-series ${{ inputs.release-series }}"
        echo "ARGS=${ARGS}" >> $GITHUB_ENV
      shell: bash
    - name: Checkout exists already
      id: checkout
      run: |
        if [[ -d "${{ github.workspace }}/.git" ]]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
      shell: bash
    - name: Checkout repository
      if: steps.checkout.outputs.exists != 'true'
      uses: actions/checkout@v3
    - name: Set up Python and pontos
      uses: greenbone/actions/setup-pontos@v3
      id: virtualenv
      with:
        python-version: ${{ inputs.python-version }}
    - name: Import gpg key from secrets
      run: |
        echo -e "${{ inputs.gpg-key }}" >> tmp.file
        gpg --pinentry-mode loopback --passphrase ${{ inputs.gpg-passphrase }} --import tmp.file
        rm tmp.file
      shell: bash
      if: ${{ inputs.gpg-key }} && ${{ inputs.gpg-fingerprint }} && ${{ inputs.gpg-passphrase }}
    # Signing
    - name: Sign files for released version
      run: |
        echo "Signing release files"
        source ${{ steps.virtualenv.outputs.activate }}
        pontos-release sign ${{ env.ARGS }} --signing-key ${{ inputs.gpg-fingerprint }} --passphrase ${{ inputs.gpg-passphrase }} --versioning-scheme ${{ inputs.versioning-scheme }} --git-tag-prefix ${{ inputs.git-tag-prefix }}
      shell: bash
      if: ${{ inputs.sign-release-files == 'true' }} && ${{ inputs.gpg-key }} && ${{ inputs.gpg-fingerprint }} && ${{ inputs.gpg-passphrase }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
