name: "Detect hidden unicode"
description: "Detects hidden unicode in newly committed config files."

inputs:
  github-token:
    description: "GH Token for writing/editing a comment to/in a PR"
    required: true

branding:
  icon: "package"
  color: "green"

runs:
  using: "composite"
  steps:
    # According to this comment on SO: https://stackoverflow.com/questions/74265821/get-modified-files-in-github-actions
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      with:
        fetch-depth: 2

    # ‚Äçhttps://docs.github.com/en/actions/reference/workflows-and-actions/workflow-commands#example-of-a-multiline-string
    # https://medium.com/@ibraheemabukaff/github-actions-exporting-multi-line-one-line-value-environment-variable-5bb86d01e866
    - name: Store a list of the changed files in this PR
      shell: bash
      run: |
        echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
        echo "$(git diff --name-only HEAD^1 HEAD)" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      with:
        repository: juriku/hidden-characters-detector
        path: hidden-characters-detector
        ref: 1b9032901a872bfd8748afa83907cd8c5dc3c5bb # main at 10. September 2025

    - name: Install hidden-characters-detector
      shell: bash
      run: |
        cd hidden-characters-detector
        pip install -r requirements.txt
        chmod +x hidden-characters-detector.py
        cd ..

    - name: Run hidden unicode detector against the list of changed files
      shell: bash
      run: |
        touch PR_COMMENT.md
        
        echo "# Scan the following files for hidden unicode:" | tee -a PR_COMMENT.md
        echo "${{ env.CHANGED_FILES }}" | tee -a PR_COMMENT.md

        # Scan for every line in CHANGED_FILES
        echo "## SCAN START" | tee -a PR_COMMENT.md
        while IFS= read -r line
        do 
          echo "### CURRENT FILE: $line" | tee -a PR_COMMENT.md
          ./hidden-characters-detector/hidden-characters-detector.py -f $line --check-ivs | tee -a PR_COMMENT.md
        done <<< "${{ env.CHANGED_FILES }}"
        echo "## SCAN END" | tee -a PR_COMMENT.md
        echo "#"
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}

    - name: Write PR Comment and fail if necessary
      shell: bash
      run: |
        # Update formatting
        sed -i -e 's/============================================================//g'
        sed -i -e 's/SCAN SUMMARY/#### SCAN SUMMARY/g'
        
        # Write a comment to the PR, which contains the Scan Output
        gh pr comment ${{ github.event.pull_request.number }} --body-file PR_COMMENT.md --create-if-none --edit-last

        # Fail if Markers have been found
        grep -vqz "Status: MARKERS FOUND" PR_COMMENT.md
