name: Container build and push
description: Generic container build and push action.

inputs:
  build-context:
    description: "Path to image build context. Default is."
    default: .
  build-docker-file:
    description: "Path to the docker file. Default is./Dockerfile."
    default: "./Dockerfile"
  build-args:
    description: "Use these build-args for the docker build process. Default is empty."
  build-secrets:
    description: "Use these build-secrets for the docker build process. Default is empty."
  cosign-key:
    description: "Cosign key to sign the image. Will be skipped if empty. Default is empty."
  cosign-key-password:
    description: "Cosign key password. Will be skipped if empty. Default is empty."
  cosign-tlog-upload:
    description: "Turn on or turn off the cosign tlog upload function. Options are true/false. Default is true."
    default: "true"
  image-flavor:
    description: "Global behavior for tags. Default is empty."
  image-labels:
    description: "Image labels."
    required: true
  image-url:
    description: "Image url/name without registry. Default is github.repository."
    default: "${{ github.repository }}"
  image-tags:
    description: "Image tags."
    required: true
  image-platforms:
    description: "Image platforms to build for. Default is linux/amd64."
    default: "linux/amd64"
  meta-annotations-levels:
    description: "Comma separated list. Options are manifest, index, manifest-descriptor, index-descriptor. Default is manifest,manifest-descriptor."
    default: "manifest,manifest-descriptor"
  registry:
    description: "Registry url."
    required: true
  registry-username:
    description: "Login registry username."
    required: true
  registry-password:
    description: "Login registry password."
    required: true
  scout-command:
    description: "Comma separated list to run several commands. Options are quickview, compare, cves, recommendations, sbom, environment. Default is cves,sbom."
    default: "cves,sbom"
  scout-user:
    description: "Dockerhub user for docker scout. Will be skipped if empty. Default is empty."
  scout-password:
    description: "Dockerhub user password for docker scout. Will be skipped if empty. Default is empty."
  scout-keep-previous-comments:
    description: "Keep but hide previous comment. If not set, keep and update one single comment per job. Options are true/false. Default is false."
    default: false
  sarif-retention-days:
    description: "Days to store the sarif artifact. Default is 1."
    default: 1
  qemu:
    description: "Install local QEMU static binaries. Options are true/false. Default is false."
    default: "false"
  qemu-platforms:
    description: "Comma separated list of platforms to install. Options are amd64, arm64, arm, riscv64, s390x, 386. Default is arm64 (amd64 is default arch)."
    default: "arm64"
  buildx-container:
    description: "Use a buildx container to build images. Options are true/false. Default is false."
    default: "false"

outputs:
  annotations:
    description: "The container annotations."
    value: ${{ steps.meta.outputs.annotations }}
  digest:
    description: "The container digest."
    value: ${{ steps.build-and-push.outputs.digest }}
  labels:
    description: "The container labels."
    value: ${{ steps.meta.outputs.labels }}
  tags:
    description: "The container tags."
    value: ${{ steps.tags.outputs.tags }}
  meta-tags:
    description: "The meta action container tags."
    value: ${{ steps.meta.outputs.tags }}

branding:
  icon: "package"
  color: "green"

runs:
  using: "composite"
  steps:
    - name: Get image name
      id: image
      shell: bash
      run: |
        name="$(echo '${{ inputs.image-url }}' | awk -F'/' '{print $NF}')"
        echo "name=$name" >> "$GITHUB_OUTPUT"

    - name: Set up QEMU
      if: ${{ inputs.qemu == 'true' }}
      uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0
      with:
        platforms: ${{ inputs.qemu-platforms }}

    - name: Set up docker buildx
      if: ${{ inputs.buildx-container == 'true' }}
      uses: docker/setup-buildx-action@c47758b77c9736f4b2ef4073d4d51994fabfe349 # v3.7.1

    - name: Login to docker registry
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry-username }}
        password: ${{ inputs.registry-password }}

    - name: Setup container meta information
      id: meta
      uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
      with:
        images: "${{ inputs.registry}}/${{ inputs.image-url }}"
        labels: ${{ inputs.image-labels }}
        tags: ${{ inputs.image-tags }}
        flavor: ${{ inputs.image-flavor }}
      env:
        DOCKER_METADATA_ANNOTATIONS_LEVELS: ${{ inputs.meta-annotations-levels }}

    # We need to filter the tags here because the tags from the meta action contain the full URL.
    # The full URL might include a secret, and secrets cannot be exposed in the output.
    - name: Filter tags
      id: tags
      shell: bash
      run: |
        set +e ; IFS=$'\n' read -r -d '' -a tags <<< "$(printf '%s\n' '${{ steps.meta.outputs.tags }}' | sort -u)" ; set -e
        echo 'tags<<EOF' >> $GITHUB_OUTPUT
        for tag in "${tags[@]}"; do
          echo "$tag" | cut -d ':' -f 2 >> $GITHUB_OUTPUT
        done
        echo 'EOF' >> $GITHUB_OUTPUT

    - name: Build and push container image
      id: build-and-push
      uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6.9.0
      with:
        annotations: ${{ steps.meta.outputs.annotations }}
        context: ${{ inputs.build-context }}
        push: ${{ github.event_name != 'pull_request' }}
        platforms: ${{ inputs.image-platforms }}
        file: ${{ inputs.build-docker-file }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: ${{ inputs.build-args }}
        secrets: ${{ inputs.build-secrets }}
        load: ${{ github.event_name == 'pull_request' && !contains(inputs.image-platforms, ',') }}

    - name: Container signing
      if: ${{ github.event_name != 'pull_request' && inputs.cosign-key && inputs.cosign-key-password }}
      uses: greenbone/actions/container-signing@a1883bd24d2d921426b3f06413e84606ecd43bdd # v3.27.11
      with:
        cosign-key: ${{ inputs.cosign-key }}
        cosign-key-password: ${{ inputs.cosign-key-password }}
        cosign-tlog-upload: ${{ inputs.cosign-tlog-upload }}
        image-tags: ${{ steps.meta.outputs.tags }}
        image-digest: ${{ steps.build-and-push.outputs.digest }}

    - name: Container sbom
      if: ${{ github.event_name == 'pull_request' && inputs.scout-user && inputs.scout-password }}
      uses: docker/scout-action@6ac950eb733f8b2811f25c05d97bfb3d181b8026 # v1.15.1
      with:
        command: ${{ inputs.scout-command }}
        image: ${{ steps.meta.outputs.tags }}
        dockerhub-user: ${{ inputs.scout-user }}
        dockerhub-password: ${{ inputs.scout-password }}
        sarif-file: /tmp/${{ steps.image.outputs.name }}.sarif
        keep-previous-comments: ${{ inputs.scout-keep-previous-comments }}

    - name: Upload sbom sarif file
      if: ${{ github.event_name == 'pull_request' && inputs.scout-user && inputs.scout-password && contains(inputs.scout-command, 'sbom') }}
      uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
      with:
        name: ${{ steps.image.outputs.name }}.sarif
        path: /tmp/${{ steps.image.outputs.name }}.sarif
        retention-days: ${{ inputs.sarif-retention-days }}
