name: "Create GitHub Releases"
author: "Jaspar Stach <jaspar.stach@greenbone.net>"
description: |
  "An action that is able to create a release for a project"
  "Supporting different programming languages and release types."

inputs:
  conventional-commits:
    deprecationMessage: "conventional-commits input is obsolete. Using conventional commits is always expected."
    description: "Deprecated."
  git-tag-prefix:
    description: "Set git tag prefix to the passed input. Default: 'v'"
    default: "v"
  github-user:
    description: "Github user name on behalf of whom the actions will be executed."
    required: true
  github-user-mail:
    description: "Mail address for the given github user."
    required: true
  github-user-token:
    description: "Token with write rights required to create the release."
    required: true
  gpg-fingerprint:
    description: "GPG fingerprint, represented as a string. Required for signing assets of the release."
  gpg-key:
    description: "GPG key, represented as a string. Required for signing assets of the release."
  gpg-passphrase:
    description: "GPG passphrase, represented as a string. Required for signing assets of the release."
  strategy:
    deprecationMessage: "strategy input is deprecated. Please use `release-type` instead."
    description: "Deprecated by release-type."
  python-version:
    description: "Python version used  to create the release. (Only important for python projects)"
    default: "3.10"
  ref:
    description: "This branch's/tag's HEAD will be candidate of the next release. Default: main branch"
    default: "main"
  release-type:
    description: |
      "What type of release should be executed?"
      "Supported: ['alpha', 'beta', 'calendar', 'major', 'minor', 'patch',  'release-candidate']; Default: patch"
    default: "patch"
  release-version:
    description: "Set an explicit version, that should be released."
  versioning-scheme:
    description: "What versioning scheme should be used for the release? Supported: ['semver', 'pep440']; Default: pep440"
    default: "pep440"
  release-series:
    description: "Allow to create new releases for an older release series like '22.4'."
  sign-release-files:
    description: "Create and upload release file signatures. Default is 'true'. Set to an other string then 'true' to disable the signatures."
    default: "true"
  update-project:
    description: "Update version in project files like `pyproject.toml`. Default is 'true'. Set to an other string then 'true' to disable updating project files."
    default: "true"

outputs:
  release-version:
    description: "Version of the release. Depending on the inputs it is calculated from the detected last release version."
    value: ${{ steps.release.outputs.release-version }}
  last-release-version:
    description: "Detected version of the previous release."
    value: ${{ steps.release.outputs.last-release-version }}
  git-release-tag:
    description: "Git tag created for the release version"
    value: ${{ steps.release.outputs.git-release-tag }}
  next-version:
    description: "Version set after a successful release"
    value: ${{ steps.release.outputs.next-version }}

branding:
  icon: "package"
  color: "green"

runs:
  using: "composite"
  steps:
    # Setup
    - name: Checkout exists already
      id: checkout
      run: |
        if [[ -d "${{ github.workspace }}/.git" ]]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
      shell: bash
    - uses: actions/checkout@v3
      if: steps.checkout.outputs.exists != 'true'
      with:
        fetch-depth: 0 #for conventional commits
        persist-credentials: false
        ref: ${{ inputs.ref }}
    - name: Set git name, mail and origin
      uses: greenbone/actions/set-github-user@v2
      with:
        user: ${{ inputs.github-user }}
        mail: ${{ inputs.github-user-mail }}
        token: ${{ inputs.github-user-token }}
    - name: Set up Python and pontos
      uses: greenbone/actions/setup-pontos@v2
      id: virtualenv
      with:
        python-version: ${{ inputs.python-version }}

      # Input parsing
    - name: Parse release-type
      run: |
        case ${{ inputs.release-type }} in
          alpha | beta | calendar | major | minor | patch | release-candidate)
            ARGS="--release-type ${{ inputs.release-type }}"
            ;;
          *)
            ARGS="--release-type patch"
            ;;
        esac
        if [[ "${{ inputs.strategy }}" ]]; then
          echo "strategy is deprecated, please use release-type argument"
          ARGS="--release-type ${{ inputs.strategy }}"
        fi
        echo "ARGS=${ARGS}" >> $GITHUB_ENV
      shell: bash
    - name: Parse release-version if set (overwrite release-type)
      if: ${{ inputs.release-version }}
      run: |
        ARGS="--release-version ${{ inputs.release-version }}"
        echo "ARGS=${ARGS}" >> $GITHUB_ENV
      shell: bash
    - name: Parse release-series
      if: ${{ inputs.release-series }}
      run: |
        ARGS="${ARGS} --release-series ${{ inputs.release-series }}"
        echo "ARGS=${ARGS}" >> $GITHUB_ENV
      shell: bash
    - name: Update project files
      if: ${{ inputs.update-project != 'true' }}
      run: |
        ARGS="${ARGS} --no-update-project"
        echo "ARGS=${ARGS}" >> $GITHUB_ENV
      shell: bash

      # Enable admin bypass
    - name: Allow admin users bypassing protection on ${{ inputs.ref}} branch
      uses: greenbone/actions/admin-bypass@v2
      with:
        allow: "true"
        github-token: ${{ inputs.github-user-token }}
        branch: ${{ inputs.ref }}

      # Create release
    - name: Create automatic release
      id: release
      run: |
        source ${{ steps.virtualenv.outputs.activate }}
        pontos-release release ${{ env.ARGS }} --versioning-scheme ${{ inputs.versioning-scheme }} --git-tag-prefix ${{ inputs.git-tag-prefix }}
      shell: bash
      env:
        GITHUB_USER: ${{ inputs.github-user }}
        GITHUB_TOKEN: ${{ inputs.github-user-token }}

      # Disable admin bypass
    - name: Disable bypassing protection on ${{ inputs.ref}} branch for admin users
      if: always()
      uses: greenbone/actions/admin-bypass@v2
      with:
        allow: "false"
        github-token: ${{ inputs.github-user-token }}
        branch: ${{ inputs.ref}}

      # Signing
    - name: Sign assets for released version
      uses: greenbone/actions/sign-release-files@v2
      if: inputs.sign-release-files == 'true' && inputs.gpg-key && inputs.gpg-fingerprint && inputs.gpg-passphrase
      with:
        python-version: ${{ inputs.python-version }}
        git-tag-prefix:  ${{ inputs.git-tag-prefix }}
        github-token: ${{ inputs.github-user-token }}
        gpg-fingerprint: ${{ inputs.gpg-fingerprint }}
        gpg-passphrase: ${{ inputs.gpg-passphrase }}
        gpg-key: ${{ inputs.gpg-key }}
        versioning-scheme: ${{ inputs.versioning-scheme }}
        release-series: ${{ inputs.release-series }}
        release-version: ${{ steps.release.outputs.release-version }}
