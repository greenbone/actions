name: "Pontos Release Patch version"
author: "Jaspar Stach <jaspar.stach@greenbone.net>"
description: "An action that creates a release [x.y.z -> x.y.z+1] for a project."

inputs:
  github-user:
    description: "Github user name."
    required: true
  github-user-mail:
    description: "Mail address for the given github user."
    required: true
  github-user-token:
    description: "Token with write rights required to create the release."
    required: true
  gpg-key:
    description: "GPG key, represented as a string. Required for signing assets of the release."
    required: true
  gpg-fingerprint:
    description: "GPG fingerprint, represented as a string. Required for signing assets of the release."
    required: true
  gpg-passphrase:
    description: "GPG passphrase, represented as a string. Required for signing assets of the release."
    required: true
  conventional-commits:
    description: "Use conventional commits, or Changelog file."
    default: "true"
  strategy:
    description: "What release strategy? ['patch', 'calendar'], default: patch"
    default: "patch"
  python-version:
    description: "Python version that should be installed"
    default: "3.10"
  ref:
    description: "Branch that should be released"
    default: ""

branding:
  icon: "package"
  color: "green"

runs:
  using: "composite"
  steps:
    - name: Fetch-depth
      run: |
        if [[ ${{inputs.conventional-commits}} == true ]];
        then
          echo "FETCH_DEPTH=0" >> $GITHUB_ENV
        else
          echo "FETCH_DEPTH=1" >> $GITHUB_ENV
        fi
      shell: bash
    - uses: actions/checkout@v3
      with:
        fetch-depth: ${{ env.FETCH_DEPTH }}
        persist-credentials: false
        ref: ${{ inputs.ref }}
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}
    - name: Install pontos
      run: |
        python3 -m venv ${{ github.action_path }}/pontos-release-venv
        source ${{ github.action_path }}/pontos-release-venv/bin/activate
        python -m pip install --upgrade pip
        python -m pip install --upgrade pontos
      shell: bash
    - name: Set git name, mail and origin
      run: |
        git config --global user.name "${{ inputs.github-user }}"
        git config --global user.email "${{ inputs.github-user-mail }}"
        git remote set-url origin https://${{ inputs.github-user-token }}@github.com/${{ github.repository }}
      shell: bash
    - name: Parse inputs
      run: |
        case ${{inputs.strategy}} in
          calendar)
            PREPARE_FLAGS="--${{ inputs.strategy }}"
            ;;
          patch)
            PREPARE_FLAGS="--${{ inputs.strategy }}"
            ;;
          *)
            PREPARE_FLAGS="--patch"
            ;;
        esac

        if [[ ${{inputs.conventional-commits}} == true ]];
        then
          PREPARE_FLAGS="${PREPARE_FLAGS} -CC"
          RELEASE_FLAGS="-CC"
        fi
        echo "PREPARE_FLAGS=${PREPARE_FLAGS}" >> $GITHUB_ENV
        echo "RELEASE_FLAGS=${RELEASE_FLAGS}" >> $GITHUB_ENV
      shell: bash
    - name: Allow admin users bypassing protection on ${{ inputs.ref}} branch
      uses: greenbone/actions/admin-bypass@v2
      with:
        allow: "true"
        github-token: ${{ inputs.github-user-token }}
        branch: ${{ inputs.ref}}
    - name: Prepare release
      run: |
        source ${{ github.action_path }}/pontos-release-venv/bin/activate
        pontos-release prepare ${{ env.PREPARE_FLAGS }}
      shell: bash
      env:
        GITHUB_USER: ${{ inputs.github-user }}
        GITHUB_TOKEN: ${{ inputs.github-user-token }}
    - name: Get release version
      shell: bash
      run: |
        source ${{ github.action_path }}/pontos-release-venv/bin/activate
        VERSION=$(pontos-version show)
        echo "Releasing $VERSION"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    - name: Create release
      run: |
        source ${{ github.action_path }}/pontos-release-venv/bin/activate
        pontos-release release ${{ env.RELEASE_FLAGS }}
      shell: bash
      env:
        GITHUB_USER: ${{ inputs.github-user }}
        GITHUB_TOKEN: ${{ inputs.github-user-token }}
    - name: Disable bypassing protection on ${{ inputs.ref}} branch for admin users
      uses: greenbone/actions/admin-bypass@v2
      with:
        allow: "false"
        github-token: ${{ inputs.github-user-token }}
        branch: ${{ inputs.ref}}
    - name: Import gpg key from secrets
      run: |
        echo -e "${{ inputs.gpg-key }}" >> tmp.file
        gpg --pinentry-mode loopback --passphrase ${{ inputs.gpg-passphrase }} --import tmp.file
        rm tmp.file
      shell: bash
    - name: Sign assets for released version
      run: |
        echo "Signing assets for ${{env.VERSION}}"
        source ${{ github.action_path }}/pontos-release-venv/bin/activate
        pontos-release sign --signing-key ${{ inputs.gpg-fingerprint }} --passphrase ${{ inputs.gpg-passphrase }} --release-version ${{ env.VERSION }}
      shell: bash
      env:
        GITHUB_USER: ${{ inputs.github-user }}
        GITHUB_TOKEN: ${{ inputs.github-user-token }}
