name: "Pontos Release Patch version"
author: "Jaspar Stach <jaspar.stach@greenbone.net>"
description: |
  "An action that is able to create a release for a project"
  "Supporting different programming languages and release types."

inputs:
  conventional-commits:
    description: "Deprecated."
  github-user:
    description: "Github user name on behalf of whom the actions will be executed."
    required: true
  github-user-mail:
    description: "Mail address for the given github user."
    required: true
  github-user-token:
    description: "Token with write rights required to create the release."
    required: true
  gpg-fingerprint:
    description: "GPG fingerprint, represented as a string. Required for signing assets of the release."
  gpg-key:
    description: "GPG key, represented as a string. Required for signing assets of the release."
  gpg-passphrase:
    description: "GPG passphrase, represented as a string. Required for signing assets of the release."
  strategy:
    description: "Deprecated by release-type."
  python-version:
    description: "Python version used  to create the release. (Only important for python projects)"
    default: "3.10"
  ref:
    description: "This branch's/tag's HEAD will be candidate of the next release. Default: default branch"
    default: ""
  release-type:
    description: |
      "What type of release should be executed?"
      "Supported: ['alpha', 'beta', 'calendar', 'major', 'minor', 'patch',  'release-candidate']; Default: patch"
    default: "patch"
  release-version:
    description: "Set an explicit version, that should be released."
  versioning-scheme:
    description: "What versioning scheme should be used for the release? Supported: ['semver', 'pep440']; Default: pep440"
    default: "pep440"
  release-series:
    description: "Allow to create new releases for an older release series like '22.4'."
  sign-release-files:
    description: "Create and upload release file signatures. Default is 'true'. Set to an other string then 'true' to disable the signatures."
    default: "true"

branding:
  icon: "package"
  color: "green"

runs:
  using: "composite"
  steps:
    # Setup
    - name: Checkout exists already
      id: checkout
      run: |
        if [[ -d "${{ github.workspace }}/.git" ]]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
      shell: bash
    - uses: actions/checkout@v3
      if: steps.checkout.outputs.exists != 'true'
      with:
        fetch-depth: 0 #for conventional commits
        persist-credentials: false
        ref: ${{ inputs.ref }}
    - name: Set up Python
      uses: actions/setup-python@v4
      id: python
      with:
        python-version: ${{ inputs.python-version }}
    - name: Virtual Environment
      id: virtualenv
      run: |
        echo "path=${{ github.action_path }}/${{ github.action }}-venv" >> $GITHUB_OUTPUT
        echo "name=${{ github.action }}-venv" >> $GITHUB_OUTPUT
      shell: bash
    - name: Cache Virtual Environment
      id: cache-virtualenv
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-${{ steps.python.outputs.python-version }}-${{ steps.virtualenv.outputs.name }}
        path: ${{ steps.virtualenv.outputs.path }}
    - name: Create virtual environment
      if: ${{ steps.cache-virtualenv.outputs.cache-hit != 'true' }}
      run: |
        python -m venv ${{ steps.virtualenv.outputs.path }}
      shell: bash
    - name: Install pontos
      run: |
        source ${{ steps.virtualenv.outputs.path }}/bin/activate
        python -m pip install --upgrade pip
        python -m pip install --upgrade pontos
      shell: bash
    - name: Set git name, mail and origin
      uses: greenbone/actions/set-github-user@v2
      with:
        user: ${{ inputs.github-user }}
        mail: ${{ inputs.github-user-mail }}
        token: ${{ inputs.github-user-token }}
    - name: Import gpg key from secrets
      run: |
        echo -e "${{ inputs.gpg-key }}" >> tmp.file
        gpg --pinentry-mode loopback --passphrase ${{ inputs.gpg-passphrase }} --import tmp.file
        rm tmp.file
      shell: bash
      if: ${{ inputs.gpg-key }} && ${{ inputs.gpg-fingerprint }} && ${{ inputs.gpg-passphrase }}

      # Input parsing
    - name: Parse release-type
      run: |
        case ${{ inputs.release-type }} in
          alpha | beta | calendar | major | minor | patch | release-candidate)
            ARGS="--release-type ${{ inputs.release-type }}"
            ;;
          *)
            ARGS="--release-type patch"
            ;;
        esac
        if [[ "${{ inputs.strategy }}" ]]; then
          echo "strategy is deprecated, please use release-type argument"
          ARGS="--release-type ${{ inputs.strategy }}"
        fi
        echo "ARGS=${ARGS}" >> $GITHUB_ENV
      shell: bash
    - name: Parse release-version if set (overwrite release-type)
      if: ${{ inputs.release-version }}
      run: |
        ARGS="--release-version ${{ inputs.release-version }}"
        echo "ARGS=${ARGS}" >> $GITHUB_ENV
      shell: bash
    - name: Parse release-series
      if: ${{ inputs.release-series }}
      run: |
        ARGS="${ARGS} --release-series ${{ inputs.release-series }}"
        echo "ARGS=${ARGS}" >> $GITHUB_ENV
      shell: bash

      # Enable admin bypass
    - name: Allow admin users bypassing protection on ${{ inputs.ref}} branch
      uses: greenbone/actions/admin-bypass@v2
      with:
        allow: "true"
        github-token: ${{ inputs.github-user-token }}
        branch: ${{ inputs.ref}}

      # Create release
    - name: Create automatic release
      run: |
        source ${{ steps.virtualenv.outputs.path }}/bin/activate
        pontos-release release ${{ env.ARGS }} --versioning-scheme ${{ inputs.versioning-scheme }}
      shell: bash
      env:
        GITHUB_USER: ${{ inputs.github-user }}
        GITHUB_TOKEN: ${{ inputs.github-user-token }}

      # Disable admin bypass
    - name: Disable bypassing protection on ${{ inputs.ref}} branch for admin users
      if: always()
      uses: greenbone/actions/admin-bypass@v2
      with:
        allow: "false"
        github-token: ${{ inputs.github-user-token }}
        branch: ${{ inputs.ref}}

      # Signing
    - name: Sign assets for released version
      run: |
        echo "Signing release assets"
        source ${{ steps.virtualenv.outputs.path }}/bin/activate
        pontos-release sign --signing-key ${{ inputs.gpg-fingerprint }} --passphrase ${{ inputs.gpg-passphrase }} --versioning-scheme ${{ inputs.versioning-scheme }}
      shell: bash
      if: ${{ inputs.sign-release-files == 'true' }} && ${{ inputs.gpg-key }} && ${{ inputs.gpg-fingerprint }} && ${{ inputs.gpg-passphrase }}
      env:
        GITHUB_USER: ${{ inputs.github-user }}
        GITHUB_TOKEN: ${{ inputs.github-user-token }}
