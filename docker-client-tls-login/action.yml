name: 'Docker Login with Client TLS Certificates'
description: 'Configure Docker to use client TLS certificates for mutual authentication'

inputs:
  registry:
    description: 'Docker registry URL'
    required: true
    default: 'https://packages.greenbone.net'
  client-cert:
    description: 'Client certificate (PEM format, may include certificate chain)'
    required: true
  client-key:
    description: 'Client private key (PEM format)'
    required: true
  ca-cert:
    description: 'CA certificate (PEM format). Optional if client-cert contains full chain'
    required: false
  logout:
    description: 'Clean up certificates at the end of the job'
    required: false
    default: 'true'

outputs:
  registry:
    description: 'Registry that was configured'
    value: ${{ steps.set-output.outputs.registry }}

runs:
  using: 'composite'
  steps:
    - name: Setup TLS certificate files
      shell: bash
      run: |
        CERT_DIR=$(mktemp -d)
        echo "CERT_DIR=$CERT_DIR" >> $GITHUB_ENV
        chmod 700 "$CERT_DIR"

        echo "${{ inputs.client-cert }}" > "$CERT_DIR/client.crt"
        echo "${{ inputs.client-key }}" > "$CERT_DIR/client.key"
        chmod 600 "$CERT_DIR"/*

        if [[ -n "${{ inputs.ca-cert }}" ]]; then
          echo "${{ inputs.ca-cert }}" > "$CERT_DIR/ca.crt"
          chmod 600 "$CERT_DIR/ca.crt"
          echo "CA_CERT_PATH=$CERT_DIR/ca.crt" >> $GITHUB_ENV
        fi

        echo "CLIENT_CERT_PATH=$CERT_DIR/client.crt" >> $GITHUB_ENV
        echo "CLIENT_KEY_PATH=$CERT_DIR/client.key" >> $GITHUB_ENV

    - name: Configure Docker for TLS client authentication
      shell: bash
      run: |
        DOCKER_CONFIG_DIR="$HOME/.docker"
        mkdir -p "$DOCKER_CONFIG_DIR"

        REGISTRY_HOST="${{ inputs.registry }}"
        REGISTRY_HOST=${REGISTRY_HOST#http*://}
        REGISTRY_HOST=${REGISTRY_HOST%/*}
        echo "REGISTRY_HOST=$REGISTRY_HOST" >> $GITHUB_ENV

        mkdir -p "$DOCKER_CONFIG_DIR/certs.d/$REGISTRY_HOST"
        cp "$CLIENT_CERT_PATH" "$DOCKER_CONFIG_DIR/certs.d/$REGISTRY_HOST/client.cert"
        cp "$CLIENT_KEY_PATH" "$DOCKER_CONFIG_DIR/certs.d/$REGISTRY_HOST/client.key"
        [[ -n "${CA_CERT_PATH:-}" ]] && cp "$CA_CERT_PATH" "$DOCKER_CONFIG_DIR/certs.d/$REGISTRY_HOST/ca.crt"

        chmod 600 "$DOCKER_CONFIG_DIR/certs.d/$REGISTRY_HOST/"*

    - name: Test registry connectivity
      shell: bash
      run: |
        REGISTRY_URL="${{ inputs.registry }}"
        [[ ! "$REGISTRY_URL" =~ ^https?:// ]] && REGISTRY_URL="https://$REGISTRY_URL"

        CURL_OPTS="--cert $CLIENT_CERT_PATH --key $CLIENT_KEY_PATH"
        [[ -n "${CA_CERT_PATH:-}" ]] && CURL_OPTS="$CURL_OPTS --cacert $CA_CERT_PATH"

        echo "Testing connectivity to $REGISTRY_URL/v2/..."
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" $CURL_OPTS "$REGISTRY_URL/v2/" || echo "000")
        echo "Registry responded with HTTP $HTTP_CODE"
        
        if [[ "$HTTP_CODE" != "200" && "$HTTP_CODE" != "401" ]]; then
          echo "Registry connectivity failed (HTTP $HTTP_CODE)"
          echo "Expected HTTP 200 (success) or 401 (auth required)"
          exit 1
        else
          echo "Registry connectivity successful"
        fi

    - name: Set output
      id: set-output
      shell: bash
      run: echo "registry=$REGISTRY_HOST" >> $GITHUB_OUTPUT

    - name: Cleanup certificates (if logout enabled)
      if: inputs.logout == 'true'
      shell: bash
      run: |
        [[ -n "${CERT_DIR:-}" && -d "$CERT_DIR" ]] && rm -rf "$CERT_DIR"
