name: 'Docker TLS Certificate Login'
description: 'Login to Docker registry using TLS client certificates for mutual authentication'

inputs:
  registry-url:
    description: 'Docker registry URL (e.g., registry.example.com)'
    required: true
  client-cert:
    description: 'Base64-encoded client certificate (PEM format)'
    required: true
  client-key:
    description: 'Base64-encoded client private key (PEM format)'
    required: true
  ca-cert:
    description: 'Base64-encoded CA certificate (PEM format). Optional if using system CA bundle.'
    required: false
    default: ''
  debug:
    description: 'Enable debug output (true/false)'
    required: false
    default: 'false'

outputs:
  cert-directory:
    description: 'Path to the Docker certificate directory'
    value: ${{ steps.setup.outputs.cert-directory }}

runs:
  using: 'composite'
  steps:
    - name: 'Setup Docker TLS Certificates'
      id: setup
      shell: bash
      run: |
        # Setup certificate directory
        CERT_DIR=/etc/.docker/certs.d/${{ inputs.registry-url }}
        sudo mkdir -p "$CERT_DIR"
        
        # Install certificates
        echo "${{ inputs.client-cert }}" | sudo tee "$CERT_DIR/client.cert"
        echo "${{ inputs.client-key }}" | sudo tee "$CERT_DIR/client.key"
        #chmod 644 "$CERT_DIR/client.cert"
        #chmod 600 "$CERT_DIR/client.key"
        
        # Install CA certificate if provided
        if [[ -n "${{ inputs.ca-cert }}" ]]; then
          echo "${{ inputs.ca-cert }}" > "$CERT_DIR/ca.cert"
          chmod 644 "$CERT_DIR/ca.cert"
        fi
        
        # Verify certificate and key match
        CERT_MODULUS=$(openssl x509 -noout -modulus -in "$CERT_DIR/client.cert")
        KEY_MODULUS=$(openssl rsa -noout -modulus -in "$CERT_DIR/client.key")
        if [[ "$CERT_MODULUS" != "$KEY_MODULUS" ]]; then
          echo "Error: Certificate and private key do not match"
          exit 1
        fi
        
        echo "cert-directory=$CERT_DIR" >> $GITHUB_OUTPUT
        echo "Docker TLS certificates written to: $CERT_DIR"
        
        if [[ "${{ inputs.debug }}" == "true" ]]; then
          echo "--- Certificate Details ---"
          openssl x509 -in "$CERT_DIR/client.cert" -noout -subject -dates
          ls -la "$CERT_DIR/"
        fi
        
        echo "Restarting Docker to reload TLS certs..."
        sudo systemctl restart docker
        sleep 5
        if systemctl is-active --quiet docker; then
          echo "Docker daemon restarted successfully."
        else
          echo "Docker daemon failed to restart after cert insertion."
          exit 1
        fi
